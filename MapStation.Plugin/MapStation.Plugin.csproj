<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net471</TargetFramework>
    <AssemblyName>MapStation.Plugin</AssemblyName>
    <Description>BepInEx Plugin Assembly for MapStation.</Description>
    
    <!-- Pull version from root package.json -->
    <_PackageJson>$([System.IO.File]::ReadAllText("$(MSBuildThisFileDirectory)/../package.json"))</_PackageJson>
    <Version>$([System.Text.RegularExpressions.Regex]::Match("$(_PackageJson)", `\"version\"\s*:\s*\"([^\"]+)\"`).Groups[1].Value)</Version>
    
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>
  
  <PropertyGroup>
    <ManagedPath>$(BRCPath)/Bomb Rush Cyberfunk_Data/Managed</ManagedPath>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
    <PackageReference Include="BepInEx.Core" Version="5.*" />
    <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*" />
    <PackageReference Include="UnityEngine.Modules" Version="2021.3.27" IncludeAssets="compile" />
    <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all" />
  </ItemGroup>
  
  <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />
  </ItemGroup>
  
  <ItemGroup>
    <ProjectReference Include="..\libs\SlopCrewClient\SlopCrewClient\SlopCrewClient.csproj" Private="false" IncludeAssets="compile" />

    <ProjectReference Include="..\MapStation.API\MapStation.API.csproj" />
    <ProjectReference Include="..\MapStation.Common\MapStation.Common.csproj" />
    <ProjectReference Include="..\TypeForwarder\TypeForwarder.csproj" />
    <ProjectReference Include="..\libs\BRC-CommonAPI\CommonAPI.csproj" Private="false" />
  </ItemGroup>

  <!--
  Include Doctor sources
  Why?
    - Doctor must reference our stubbed Reptile components in Editor
    - Doctor must reference real Assembly-CSharp or TypeForwarder (MapStation.Tools) at runtime
  -->
  <ItemGroup>
    <Compile Include="../MapStation.Tools/Runtime/Doctor/**/*.cs" />
  </ItemGroup>
  
  <ItemGroup>
    <Reference Include="Assembly-CSharp">
      <HintPath>$(ManagedPath)/Assembly-CSharp.dll</HintPath>
      <Private>false</Private>
      <Publicize>true</Publicize>
    </Reference>
      <Reference Include="Unity.TextMeshPro">
          <HintPath>$(ManagedPath)/Unity.TextMeshPro.dll</HintPath>
          <Private>false</Private>
      </Reference>
    <Reference Include="Rewired_Core">
        <HintPath>$(ManagedPath)/Rewired_Core.dll</HintPath>
        <Private>false</Private>
    </Reference>
    <Reference Include="Unity.AI.Navigation">
      <HintPath>$(ManagedPath)/Unity.AI.Navigation.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="Unity.Postprocessing.Runtime">
      <HintPath>$(ManagedPath)/Unity.Postprocessing.Runtime.dll</HintPath>
      <Private>false</Private>
    </Reference>
  <Reference Include="UnityEngine.UI">
      <HintPath>$(ManagedPath)/UnityEngine.UI.dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>
  
  <Target Name="CopyToPluginBuild" AfterTargets="PostBuildEvent" Condition="'' != '$(LocalPluginBuild)'">
    <ItemGroup>
      <_Assets Include="$(SolutionDir)Assets/**/*" />
    </ItemGroup>
    <Copy SourceFiles="@(_Assets)" DestinationFolder="$(LocalPluginBuild)\%(RecursiveDir)" />
    
    <PropertyGroup>
      <AlwaysCommand>
        <!-- Copy plugin -->
        xcopy /q/y/i "$(TargetDir)" "$(LocalPluginBuild)" /E /H /C
        <!-- Copy Zip DLLs -->
        copy "$(UnityEditorDataDir)\MonoBleedingEdge\lib\mono\unityjit-win32\System.IO.Compression.dll" "$(LocalPluginBuild)"
        copy "$(UnityEditorDataDir)\MonoBleedingEdge\lib\mono\unityjit-win32\System.IO.Compression.Filesystem.dll" "$(LocalPluginBuild)"
        xcopy /q/y/i "$(LocalPluginBuild)" "$(BepInExDirectory)\plugins\MapStation" /E /H /C
        <!-- TODO rewrite these to use msbuild, not xcopy. MSBuild is more reliable, more explicit -->
      </AlwaysCommand>
    </PropertyGroup>
    <Exec Command="$(AlwaysCommand)" />
  </Target>
</Project>
